// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace FilaView
{
    public unsafe abstract partial class IWin : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IWin;

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "??0IWin@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "??0IWin@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?create@IWin@@SAPEAV1@PEAV1@_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Create(__IntPtr win, bool with_border);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?destroy@IWin@@SAXPEAV1@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Destroy(__IntPtr win);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?load_model@IWin@@QEAAHPEBDM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadModel(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string file, float sz);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?operator_s@IWin@@QEAAHPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OperatorS(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string ops, int len);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?create_operators@IWin@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateOperators(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?regist_select@IWin@@QEAAXP6AXI@Z@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RegistSelect(__IntPtr __instance, __IntPtr fun);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FilaView.IWin> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FilaView.IWin>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::FilaView.IWin managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::FilaView.IWin managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IWin __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IWinInternal(native.ToPointer(), skipVTables);
        }

        internal static IWin __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IWin)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IWin __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IWin)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IWin __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IWinInternal(native, skipVTables);
        }

        protected IWin(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        protected IWin()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FilaView.IWin.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "FilaView.IWin");
        }

        protected IWin(global::FilaView.IWin _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FilaView.IWin.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "FilaView.IWin");
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract void Exec(bool thread);

        public abstract void SetupGui();

        public abstract global::FilaView.IView View(int id);

        public int LoadModel(string file, float sz)
        {
            var ___ret = __Internal.LoadModel(__Instance, file, sz);
            return ___ret;
        }

        public int OperatorS(string ops, int len)
        {
            var ___ret = __Internal.OperatorS(__Instance, ops, len);
            return ___ret;
        }

        public void CreateOperators()
        {
            __Internal.CreateOperators(__Instance);
        }

        public void RegistSelect(global::FilaView.Delegates.Action_uint fun)
        {
            var __arg0 = fun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fun);
            __Internal.RegistSelect(__Instance, __arg0);
        }

        public static global::FilaView.IWin Create(global::FilaView.IWin win, bool with_border)
        {
            var __arg0 = win is null ? __IntPtr.Zero : win.__Instance;
            var ___ret = __Internal.Create(__arg0, with_border);
            var __result0 = global::FilaView.IWin.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static void Destroy(global::FilaView.IWin win)
        {
            var __arg0 = win is null ? __IntPtr.Zero : win.__Instance;
            __Internal.Destroy(__arg0);
        }

        public abstract ulong Handle
        {
            get;
        }

        #region Virtual table interop

        // uint64_t handle() = 0
        private static global::FilaView.Delegates.Func_ulong___IntPtr _HandleDelegateInstance;

        private static ulong _HandleDelegateHook(__IntPtr __instance)
        {
            var __target = global::FilaView.IWin.__GetInstance(__instance);
            var ___ret = __target.Handle;
            return ___ret;
        }

        // void exec(bool thread) = 0
        private static global::FilaView.Delegates.Action___IntPtr_bool _ExecDelegateInstance;

        private static void _ExecDelegateHook(__IntPtr __instance, bool thread)
        {
            var __target = global::FilaView.IWin.__GetInstance(__instance);
            __target.Exec(thread);
        }

        // void setup_gui() = 0
        private static global::FilaView.Delegates.Action___IntPtr _SetupGuiDelegateInstance;

        private static void _SetupGuiDelegateHook(__IntPtr __instance)
        {
            var __target = global::FilaView.IWin.__GetInstance(__instance);
            __target.SetupGui();
        }

        // IView *view(int id = 0) = 0
        private static global::FilaView.Delegates.Func___IntPtr___IntPtr_int _ViewDelegateInstance;

        private static __IntPtr _ViewDelegateHook(__IntPtr __instance, int id)
        {
            var __target = global::FilaView.IWin.__GetInstance(__instance);
            var ___ret = __target.View(id);
            return ___ret is null ? __IntPtr.Zero : ___ret.__Instance;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[4];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _HandleDelegateInstance += _HandleDelegateHook;
                _ExecDelegateInstance += _ExecDelegateHook;
                _SetupGuiDelegateInstance += _SetupGuiDelegateHook;
                _ViewDelegateInstance += _ViewDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_HandleDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_ExecDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_SetupGuiDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_ViewDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4, 0);
                            ManagedVTables[0][0] = Thunks[0];
                            ManagedVTables[0][1] = Thunks[1];
                            ManagedVTables[0][2] = Thunks[2];
                            ManagedVTables[0][3] = Thunks[3];
                            VTables.Methods[0] = new Delegate[4];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    public unsafe partial class IWinInternal : global::FilaView.IWin, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IWinInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IWinInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        public override void Exec(bool thread)
        {
            var ___ExecDelegate = __VTables.GetMethodDelegate<global::FilaView.Delegates.Action___IntPtr_bool>(0, 1);
            ___ExecDelegate(__Instance, thread);
        }

        public override void SetupGui()
        {
            var ___SetupGuiDelegate = __VTables.GetMethodDelegate<global::FilaView.Delegates.Action___IntPtr>(0, 2);
            ___SetupGuiDelegate(__Instance);
        }

        public override global::FilaView.IView View(int id)
        {
            var ___ViewDelegate = __VTables.GetMethodDelegate<global::FilaView.Delegates.Func___IntPtr___IntPtr_int>(0, 3);
            var ___ret = ___ViewDelegate(__Instance, id);
            var __result0 = global::FilaView.IView.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public override ulong Handle
        {
            get
            {
                var ___HandleDelegate = __VTables.GetMethodDelegate<global::FilaView.Delegates.Func_ulong___IntPtr>(0, 0);
                var ___ret = ___HandleDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe abstract partial class IView : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IView;

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "??0IView@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "??0IView@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FilaView.IView> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FilaView.IView>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::FilaView.IView managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::FilaView.IView managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IView __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IViewInternal(native.ToPointer(), skipVTables);
        }

        internal static IView __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IView)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IView __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IView)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IView __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IViewInternal(native, skipVTables);
        }

        protected IView(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        protected IView()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FilaView.IView.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "FilaView.IView");
        }

        protected IView(global::FilaView.IView _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FilaView.IView.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "FilaView.IView");
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract void ShowModel(int id, bool show);

        #region Virtual table interop

        // void show_model(int id, bool show) = 0
        private static global::FilaView.Delegates.Action___IntPtr_int_bool _ShowModelDelegateInstance;

        private static void _ShowModelDelegateHook(__IntPtr __instance, int id, bool show)
        {
            var __target = global::FilaView.IView.__GetInstance(__instance);
            __target.ShowModel(id, show);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _ShowModelDelegateInstance += _ShowModelDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ShowModelDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTables[0][0] = Thunks[0];
                            VTables.Methods[0] = new Delegate[1];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    public unsafe partial class IViewInternal : global::FilaView.IView, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IViewInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IViewInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        public override void ShowModel(int id, bool show)
        {
            var ___ShowModelDelegate = __VTables.GetMethodDelegate<global::FilaView.Delegates.Action___IntPtr_int_bool>(0, 0);
            ___ShowModelDelegate(__Instance, id, show);
        }
    }

    public unsafe partial class RDNode
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FilaView.RDNode> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FilaView.RDNode>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::FilaView.RDNode managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::FilaView.RDNode managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static RDNode __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new RDNode(native.ToPointer(), skipVTables);
        }

        internal static RDNode __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (RDNode)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static RDNode __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new RDNode(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RDNode(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected RDNode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class Node : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 80)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_Node;
            internal global::Std.WeakPtr.__Internal _Wptr;
            internal uint _id;
            internal __IntPtr _rdnode;
            internal global::FilaView.Tg.Tvec3.__Internalc__N_tg_S_Tvec3__f _translation;
            internal global::FilaView.Tg.Tvec3.__Internalc__N_tg_S_Tvec3__f _rotation;
            internal global::FilaView.Tg.Tvec3.__Internalc__N_tg_S_Tvec3__f _scale;

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "??0Node@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "??1Node@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?translation@Node@@QEAAXQEAM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Translation(__IntPtr __instance, float[] t);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?set_translation@Node@@QEAAXQEBM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetTranslation(__IntPtr __instance, float[] f);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?rotation@Node@@QEAAXPEAM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rotation(__IntPtr __instance, float* _0);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?set_rotation@Node@@QEAAXPEBM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetRotation(__IntPtr __instance, float* _0);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?scale@Node@@QEAAXPEAM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Scale(__IntPtr __instance, float* _0);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?set_scale@Node@@QEAAXPEBM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetScale(__IntPtr __instance, float* _0);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?rdNode@Node@@QEAAPEAVRDNode@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetRd(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("FilaView.dll", EntryPoint = "?id@Node@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint Id(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FilaView.Node> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FilaView.Node>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::FilaView.Node managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::FilaView.Node managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Node __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Node(native.ToPointer(), skipVTables);
        }

        internal static Node __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Node)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Node __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (Node)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static Node __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Node(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Node(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Node(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public Node()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FilaView.Node.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "FilaView.Node");
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Translation(float[] t)
        {
            if (t == null || t.Length != 3)
                throw new ArgumentOutOfRangeException("t", "The dimensions of the provided array don't match the required size.");
            __Internal.Translation(__Instance, t);
        }

        public void SetTranslation(float[] f)
        {
            if (f == null || f.Length != 3)
                throw new ArgumentOutOfRangeException("f", "The dimensions of the provided array don't match the required size.");
            __Internal.SetTranslation(__Instance, f);
        }

        public void Rotation(ref float _0)
        {
            fixed (float* ___00 = &_0)
            {
                var __arg0 = ___00;
                __Internal.Rotation(__Instance, __arg0);
            }
        }

        public void SetRotation(ref float _0)
        {
            fixed (float* ___00 = &_0)
            {
                var __arg0 = ___00;
                __Internal.SetRotation(__Instance, __arg0);
            }
        }

        public void Scale(ref float _0)
        {
            fixed (float* ___00 = &_0)
            {
                var __arg0 = ___00;
                __Internal.Scale(__Instance, __arg0);
            }
        }

        public void SetScale(ref float _0)
        {
            fixed (float* ___00 = &_0)
            {
                var __arg0 = ___00;
                __Internal.SetScale(__Instance, __arg0);
            }
        }

        public global::FilaView.RDNode GetRd()
        {
            var ___ret = __Internal.GetRd(__Instance);
            var __result0 = global::FilaView.RDNode.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public virtual global::FilaView.RDNode GetRd(bool create)
        {
            var ___GetRd_1Delegate = __VTables.GetMethodDelegate<global::FilaView.Delegates.Func___IntPtr___IntPtr_bool>(0, 0);
            var ___ret = ___GetRd_1Delegate(__Instance, create);
            var __result0 = global::FilaView.RDNode.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        protected uint _id
        {
            get
            {
                return ((__Internal*)__Instance)->_id;
            }

            set
            {
                ((__Internal*)__Instance)->_id = value;
            }
        }

        protected global::FilaView.RDNode Rd
        {
            get
            {
                var __result0 = global::FilaView.RDNode.__GetOrCreateInstance(((__Internal*)__Instance)->_rdnode, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->_rdnode = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint Id
        {
            get
            {
                var ___ret = __Internal.Id(__Instance);
                return ___ret;
            }
        }

        #region Virtual table interop

        // RDNode *rdNode(bool create)
        private static global::FilaView.Delegates.Func___IntPtr___IntPtr_bool _GetRd_1DelegateInstance;

        private static __IntPtr _GetRd_1DelegateHook(__IntPtr __instance, bool create)
        {
            var __target = global::FilaView.Node.__GetInstance(__instance);
            var ___ret = __target.GetRd(create);
            return ___ret is null ? __IntPtr.Zero : ___ret.__Instance;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetRd_1DelegateInstance += _GetRd_1DelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetRd_1DelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTables[0][0] = Thunks[0];
                            VTables.Methods[0] = new Delegate[1];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    namespace Tg
    {
        namespace Tvec3
        {
            [StructLayout(LayoutKind.Sequential, Size = 12)]
            public unsafe partial struct __Internalc__N_tg_S_Tvec3__f
            {
                internal fixed float data_[3];
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate ulong Func_ulong___IntPtr(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_bool(__IntPtr __instance, [MarshalAs(UnmanagedType.I1)] bool arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate __IntPtr Func___IntPtr___IntPtr_int(__IntPtr __instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action_uint(uint __0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_int_bool(__IntPtr __instance, int arg1, [MarshalAs(UnmanagedType.I1)] bool arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate __IntPtr Func___IntPtr___IntPtr_bool(__IntPtr __instance, [MarshalAs(UnmanagedType.I1)] bool arg1);
    }
}

namespace Std
{
    namespace enable_shared_from_this
    {
        [StructLayout(LayoutKind.Sequential, Size = 16, Pack = 8)]
        public unsafe partial struct __Internalc__N_std_S_enable_shared_from_this____S_Node
        {
            internal global::Std.WeakPtr.__Internal _Wptr;
        }
    }
}
